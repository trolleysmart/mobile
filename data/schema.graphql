input AddItemsToShoppingListInput {
  productPriceIds: [ID!]
  stapleItemIds: [ID!]
  newStapleItemNames: [String!]
  clientMutationId: String
}

type AddItemsToShoppingListPayload {
  errorMessage: String
  shoppingListItems: [ShoppingListItem]
  clientMutationId: String
}

type MultiBuy {
  awardQuantity: Int
  awardValue: Float
}

type Mutation {
  addItemsToShoppingList(input: AddItemsToShoppingListInput!): AddItemsToShoppingListPayload
  removeItemsFromShoppingList(input: RemoveItemsFromShoppingListInput!): RemoveItemsFromShoppingListPayload
  submitUserFeedback(input: SubmitUserFeedbackInput!): SubmitUserFeedbackPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type ParentStore implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
  address: String
}

type ParentTag implements Node {
  id: ID!
  key: String
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
}

type Product implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  barcode: String
  size: String
  productPageUrl: String
  specialType: String
  priceToDisplay: Float
  saving: Float
  savingPercentage: Float
  currentPrice: Float
  wasPrice: Float
  multiBuy: MultiBuy
  unitPrice: UnitPrice
  offerEndDate: String
  comments: String
  store: Store
  tags: [Tag]
}

# A connection to a list of items.
type ProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProductEdge]
}

# An edge in a connection.
type ProductEdge {
  # The item at the end of the edge
  node: Product

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  user: User
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveItemsFromShoppingListInput {
  shoppingListItemIds: [ID!]
  clientMutationId: String
}

type RemoveItemsFromShoppingListPayload {
  errorMessage: String
  shoppingListItems: [ShoppingListItem]
  clientMutationId: String
}

type ShoppingListItem implements Node {
  id: ID!
  itemType: String
  stapleItemId: ID
  productPriceId: ID
  name: String
  description: String
  imageUrl: String
  barcode: String
  size: String
  productPageUrl: String
  specialType: String
  priceToDisplay: Float
  saving: Float
  savingPercentage: Float
  currentPrice: Float
  wasPrice: Float
  multiBuy: MultiBuy
  unitPrice: UnitPrice
  offerEndDate: String
  quantity: Int
  comments: String
  store: Store
  tags: [Tag]
}

# A connection to a list of items.
type ShoppingListItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ShoppingListItemEdge]
}

# An edge in a connection.
type ShoppingListItemEdge {
  # The item at the end of the edge
  node: ShoppingListItem

  # A cursor for use in pagination
  cursor: String!
}

type StapleItem implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  popular: Boolean
  tags: [Tag]
}

# A connection to a list of items.
type StapleItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StapleItemEdge]
}

# An edge in a connection.
type StapleItemEdge {
  # The item at the end of the edge
  node: StapleItem

  # A cursor for use in pagination
  cursor: String!
}

type Store implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
  address: String
  parentStore: ParentStore
}

# A connection to a list of items.
type StoreTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StoreTypeEdge]
}

# An edge in a connection.
type StoreTypeEdge {
  # The item at the end of the edge
  node: Store

  # A cursor for use in pagination
  cursor: String!
}

input SubmitUserFeedbackInput {
  feedback: String
  clientMutationId: String
}

type SubmitUserFeedbackPayload {
  errorMessage: String
  clientMutationId: String
}

type Tag implements Node {
  id: ID!
  key: String
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
  parentTag: ParentTag
}

# A connection to a list of items.
type TagTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TagTypeEdge]
}

# An edge in a connection.
type TagTypeEdge {
  # The item at the end of the edge
  node: Tag

  # A cursor for use in pagination
  cursor: String!
}

type UnitPrice {
  price: Float
  size: String
}

type User implements Node {
  id: ID!
  shoppingListItems(after: String, first: Int, before: String, last: Int, name: String, tagKeys: [String], storeKeys: [String]): ShoppingListItemConnection
  products(after: String, first: Int, before: String, last: Int, name: String, description: String, sortOption: String, tagKeys: [String], storeKeys: [String], special: Boolean): ProductConnection
  stapleItems(after: String, first: Int, before: String, last: Int, name: String, tagKeys: [String]): StapleItemConnection
}

type Viewer implements Node {
  id: ID!
  tags(after: String, first: Int, before: String, last: Int, name: String, level: Int, forDisplay: Boolean): TagTypeConnection
  stores(after: String, first: Int, before: String, last: Int, name: String): StoreTypeConnection
}
